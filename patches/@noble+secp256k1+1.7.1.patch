diff --git a/node_modules/@noble/secp256k1/lib/index.js b/node_modules/@noble/secp256k1/lib/index.js
index 33a0843..3e3f2f7 100644
--- a/node_modules/@noble/secp256k1/lib/index.js
+++ b/node_modules/@noble/secp256k1/lib/index.js
@@ -1135,12 +1135,14 @@ exports.utils = {
         if (crypto.web) {
             return crypto.web.getRandomValues(new Uint8Array(bytesLength));
         }
-        else if (crypto.node) {
-            const { randomBytes } = crypto.node;
-            return Uint8Array.from(randomBytes(bytesLength));
-        }
+
         else {
-            throw new Error("The environment doesn't have randomBytes function");
+            try {
+                const randomBytes = require('expo-crypto').getRandomBytes;
+                return randomBytes(bytesLength);
+            } catch (e) {
+                throw new Error("The environment doesn't have randomBytes function and we couldn't use expo-crypto");
+}
         }
     },
     randomPrivateKey: () => exports.utils.hashToPrivateKey(exports.utils.randomBytes(groupLen + 8)),
@@ -1155,14 +1157,14 @@ exports.utils = {
             const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));
             return new Uint8Array(buffer);
         }
-        else if (crypto.node) {
-            const { createHash } = crypto.node;
-            const hash = createHash('sha256');
-            messages.forEach((m) => hash.update(m));
-            return Uint8Array.from(hash.digest());
-        }
         else {
-            throw new Error("The environment doesn't have sha256 function");
+            try {
+                const crypto = require('expo-crypto');
+                const buffer = await crypto.digest(crypto.CryptoDigestAlgorithm.SHA256, concatBytes(...messages));
+                return new Uint8Array(buffer);
+            } catch(e){
+                throw new Error("The environment doesn't have sha256 function and we could not use expo-crypto");
+            }
         }
     },
     hmacSha256: async (key, ...messages) => {
